swagger: '2.0'
info:
  title: Clinical API
  description: >-
    Clinical API, starting from the base version already in use by the healthcare team in boc-profiled.

    Primarily adding fields for the curation application, and creating a consistent path forward.
  version: 1.1.1

host: profiled_1:8002

consumes:
  - application/json
produces:
  - application/json


tags:
  - name: auth
    description: "Everything about token authorization"
  - name: domains
    description: "Everything about a patient's domain"
  - name: domains/patients
    description: "Everything about a patient"
  - name: domains/patients/appointments
    description: "Everything about a patient's appointments"
  - name: domains/patients/events
    description: "Everything about a patient's clinical events"
  - name: domains/patients/encounters
    description: "Everything about a patient's encounters"
  - name: domains/providers
    description: "Everything about a provider. TBD: This might go under domain as well."


schemes:
  - https

paths:
  /api-token-auth/:
    post:
      tags:
        - auth
      operationId: getToken
      parameters:
        - in: body
          name: authTokenRequest
          description: "Credentials to obtain an auth token"
          required: true
          schema:
            $ref: "#/definitions/AuthTokenRequest"
      responses:
        200:
          description: "Successful operation"
          schema:
              $ref: "#/definitions/AuthTokenResponse"

# Appointments endpoints
  /clinical/domains/{domain_id}/patients/{patient_id}/appointments/:
    post:
      tags:
        - domains/patients/appointments
      summary: Add a new patient appointment
      operationId: addAppointment
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The ID of the patient"
          required: true
          type: string
        - in: body
          name: appointment
          description: "Appointment that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Appointment"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Appointment"
        405:
          description: "Invalid input"
      security:
        - Token: []

    get:
      tags:
        - domains/patients/appointments
      summary: List all appointments for a patient
      operationId: getAppointments
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The ID of the patient"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Appointment"
      security:
        - Token: []

  /clinical/domains/{domain_id}/patients/{patient_id}/appointments/{appointment_id}/:
    get:
      tags:
        - domains/patients/appointments
      summary: Find a patient's appointment by id
      operationId: getAppointmentById
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The ID of the patient"
          required: true
          type: string
        - in: path
          name: appointment_id
          description: "The ID of the appointment to return"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Appointment"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
      security:
        - Token: []

    delete:
      tags:
        - domains/patients/appointments
      summary: Deletes an existing patient appointment
      operationId: deleteAppointment
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The ID of the patient"
          required: true
          type: string
        - in: path
          name: appointment_id
          description: "The ID of the appointment to delete"
          required: true
          type: string
      responses:
        204:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
      security:
        - Token: []

    put:
      tags:
        - domains/patients/appointments
      summary: Update an existing patient appointment
      operationId: updateAppointment
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The ID of the patient"
          required: true
          type: string
        - in: path
          name: appointment_id
          description: "The ID of the appointment to update"
          required: true
          type: string
        - in: body
          name: appointment
          description: "Appointment that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Appointment"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Appointment"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
        405:
          description: "Validation exception"
      security:
        - Token: []

# Domain endpoints
  /clinical/domains/:
    get:
      tags:
        - domains
      summary: Get all domains
      operationId: getDomains
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Domain"
      security:
        - Token: []

    post:
      tags:
        - domains
      summary: Add a new domain
      operationId: addDomain
      parameters:
        - in: body
          name: description
          description: "A name or description for this Domain"
          schema:
            type: string
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Domain"
        405:
          description: "Invalid input"
      security:
        - Token: []

  /clinical/domains/{domain_id}/:
    get:
      tags:
        - domains
      summary: Get the information about a domain
      operationId: getDomain
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
              $ref: "#/definitions/Domain"
      security:
        - Token: []

    put:
      tags:
        - domains
      summary: Update a domain
      operationId: updateDomain
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
      responses:
        201:
          description: "Succesful operation"
          schema:
            $ref: "#/definitions/Domain"

        405:
          description: "Invalid input"
      security:
        - Token: []

    delete:
      tags:
        - domains
      summary: Delete a domain
      operationId: deleteDomain
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
      responses:
        201:
          description: "Succesful operation"
        405:
          description: "Invalid input"
      security:
        - Token: []

# Patient endpoints
  /clinical/domains/{domain_id}/patients/:
    post:
      tags:
        - domains/patients
      summary: Add a new patient to a domain
      operationId: addPatient
      parameters:
        - in: path
          name: domain_id
          description: "The domain ID"
          required: true
          type: string
        - in: body
          name: patient
          description: "A patient object with clinical records"
          schema:
            $ref: "#/definitions/Patient"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Patient"
        405:
          description: "Invalid input"
      security:
        - Token: []

    get:
      tags:
        - domains/patients
      summary: Get all patients in a domain
      operationId: getPatients
      parameters:
        - in: path
          name: domain_id
          description: "The domain ID"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Patient"
      security:
        - Token: []

  /clinical/domains/{domain_id}/patients/{patient_id}/:
    get:
      tags:
        - domains/patients
      summary: Get information about a patient in the domain
      operationId: getPatient
      parameters:
        - in: path
          name: domain_id
          description: "The domain ID"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The patient ID"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Patient"
      security:
        - Token: []

    put:
      tags:
        - domains/patients
      summary: Update a patient in a domain
      operationId: updatePatient
      parameters:
        - in: path
          name: domain_id
          description: "The domain ID"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The patient ID"
          required: true
          type: string
        - in: body
          name: patients
          description: "Patients that need to be added to the domain"
          schema:
            type: array
            items:
              $ref: "#/definitions/Patient"
      responses:
        201:
          description: "Successful operation"
        405:
          description: "Invalid input"
      security:
        - Token: []

    delete:
      tags:
        - domains/patients
      summary: Delete a patient in a domain
      operationId: deletePatient
      parameters:
        - in: path
          name: domain_id
          description: "The domain ID"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The patient ID"
          required: true
          type: string
      responses:
        201:
          description: "Succesful operation"
        405:
          description: "Invalid input"
      security:
        - Token: []


# Encounter endpoints
  /clinical/domains/{domain_id}/patients/{patient_id}/encounters/:
    post:
      tags:
        - domains/patients/encounters
      summary: Add a new patient encounter
      operationId: addEncounter
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The patient ID"
          required: true
          type: string
        - in: body
          name: encounter
          description: "The encounter that needs to be added"
          required: true
          schema:
            $ref: "#/definitions/Encounter"
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Encounter"
        405:
          description: "Invalid input"
      security:
        - Token: []

    get:
      tags:
        - domains/patients/encounters
      summary: List all encounters for a patient
      operationId: getEncounters
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The patient ID"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Encounter"
      security:
        - Token: []

  /clinical/domains/{domain_id}/patients/{patient_id}/encounters/{encounter_id}/:
    get:
      tags:
        - domains/patients/encounters
      summary: Find a patient's encounter by id
      operationId: getEncounterById
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The patient ID"
          required: true
          type: string
        - in: path
          name: encounter_id
          description: "The encounter ID"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Encounter"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
      security:
        - Token: []

    delete:
      tags:
        - domains/patients/encounters
      summary: Deletes an existing patient encounter
      operationId: deleteEncounter
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The patient ID"
          required: true
          type: string
        - in: path
          name: encounter_id
          description: "The ID of the encounter to delete"
          required: true
          type: string
      responses:
        204:
          description: "Successful operation"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
      security:
        - Token: []

    put:
      tags:
        - domains/patients/encounters
      summary: Update an existing patient encounter
      operationId: updateEncounter
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The patient ID"
          required: true
          type: string
        - in: path
          name: encounter_id
          description: "The ID of the encounter to update"
          required: true
          type: string
        - in: body
          name: encounter
          description: "Encounter that needs to be updated"
          required: true
          schema:
            $ref: "#/definitions/Encounter"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Encounter"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
        405:
          description: "Validation exception"
      security:
        - Token: []

# Event endpoints
  /clinical/domains/{domain_id}/patients/{patient_id}/events/:
    get:
      tags:
        - domains/patients/events
      summary: List all events for a patient
      operationId: getEvents
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The patient ID"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
      security:
        - Token: []

  /clinical/domains/{domain_id}/patients/{patient_id}/events/{event_id}/:
    get:
      tags:
        - domains/patients/events
      summary: Find a patient's event by id
      operationId: getEventById
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: patient_id
          description: "The patient ID"
          required: true
          type: string
        - in: path
          name: event_id
          description: "The event ID"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Not found"
      security:
        - Token: []


# Provider endpoints
  /clinical/domains/{domain_id}/providers/:
    get:
      tags:
        - domains/providers
      summary: Get all providers
      operationId: getProviders
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              $ref: "#/definitions/Provider"
      security:
        - Token: []

    post:
      tags:
        - domains/providers
      summary: Add a new provider
      operationId: addProvider
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: body
          name: description
          description: "A name or description for this provider"
          schema:
            type: string
      responses:
        201:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Provider"
        405:
          description: "Invalid input"
      security:
        - Token: []

  /clinical/domains/{domain_id}/providers/{provider_id}/:
    get:
      tags:
        - domains/providers
      summary: Get the information about a provider
      operationId: getProvider
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: provider_id
          description: "The ID of the provider"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
              $ref: "#/definitions/Provider"
      security:
        - Token: []

    put:
      tags:
        - domains/providers
      summary: Update a provider
      operationId: updateProvider
      parameters:
        - in: path
          name: domain_id
          description: "The ID of the domain"
          required: true
          type: string
        - in: path
          name: provider_id
          description: "The ID of the provider"
          required: true
          type: string
      responses:
        201:
          description: "Succesful operation"
          schema:
            $ref: "#/definitions/Provider"

        405:
          description: "Invalid input"
      security:
        - Token: []

    delete:
      tags:
        - domains/providers
      summary: Delete a provider
      operationId: deleteProvider
      parameters:
        - in: path
          name: provider_id
          description: "The ID of the provider"
          required: true
          type: string
      responses:
        201:
          description: "Succesful operation"
        405:
          description: "Invalid input"
      security:
        - Token: []

  /users/:
    post:
      tags:
        - user
      summary: Add a new user (curator/admin)
      operationId: addUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: user
          description: User details to create
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: successful operation
        405:
          description: invalid input
    get:
      tags:
        - user
      summary: Get all users
      operationId: getusers
      consumes:
        - application/json
      produces:
        - appliaction/json
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: "#/definitions/User"

  /users/{user_id}:
    get:
      tags:
        - user
      summary: Get the user details
      operationId: getUser
      consumes:
        - application/json
      produces:
        - appliaction/json
      parameters:
        - in: path
          name: user_id
          description: The ID of the user
          required: true
          type: string
      responses:
        200:
          description: successful operation
    put:
      tags:
        - user
      summary: Update user details
      operationId: updateUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: user_id
          description: the user id
          required: true
          type: string
        - in: body
          name: user
          description: User details to be updated
          schema:
            $ref: "#/definitions/User"
      responses:
        201:
          description: successful operation
        405:
          description: Invalid input
    delete:
      tags:
        - user
      summary: Delete a user
      operationId: deleteUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: user_id
          description: The ID of the user
          required: true
          type: string
      responses:
        201:
          description: succesful operation
        405:
          description: invalid input


definitions:
  AuthTokenRequest:
    type: object
    properties:
      username:
        type: string
      password:
        type: string

  AuthTokenResponse:
    type: object
    properties:
      token:
        type: string

  Appointment:
    description: "A patient appointment"
    required: [data_source_id, provider_id, start, facility_id, procedures_scheduled]
    properties:
      data_source_id:
        type: integer
      id:
        type: string
        description: "A reference to this appointment"
      provider_id:
        description: "The ID of the performing provider (internal boc id?) - should be validated"
        type: string
      start:
        description: "The start date and time of this appointment"
        type: string
        format: date-time
      facility_id:
        description: "The treating facility of this appointment (internal boc id?) - should be validated"
        type: string
      procedures_scheduled:
        description: >
          Procedures to be performed at this appointment.
          For a surgical appointment, this will typically contain one entry - but there may be more
          complex procedures involving multiple separate steps.
        type: array
        items:
          $ref: "#/definitions/Procedure"

  Domain:
    type: object
    description: "A domain of patients for curators to review"
    required: [name]
    properties:
      id:
        type: string
      name:
        type: string

  Diagnosis:
    type: object
    required: [code, code_type]
    properties:
      id:
        type: string
        description: "A reference to this diagnosis"
      code:
        type: string
        description: "Standardized Diagnosis Code"
      code_type:
        type: string
        description: "Type of Diagnosis Code.  Accepted values are ICD9, ICD10, MEDCIN and SNOMED"
        enum: ["ICD9", "ICD10", "MEDCIN", "SNOMED"]
      name:
        type: string
        description: "Description of diagnosis code"
      category:
        type: string
        description: "Source of diagnosis code (family history, admitting Dx, discharging dx, etc)"
      status:
        type: string
        description: "Status of the patient's diagnosis.  Accepted values are active diagnosis, inactive diagnosis, resolved, etc"
        enum: ["Active", "Inactive", "Resolved"]
      onset:
        type: string
        description: "Date of diagnosis onset"
        format: date-time
      resolution:
        type: string
        description: "Date of diagnosis resolution"
        format: date-time
      principal_dx:
        type: boolean
        description: "Flags primary diagnosis"

    example:
      code: "E11.311"
      code_type: "ICD-10-CM"
      name: "Type 2 diabetes mellitus with unspecified diabetic retinopathy with macular edema"

  Encounter:
    type: object
    description: "A patient encounter"
    required: [data_source_id, start, provider_id]
    properties:
      data_source_id:
        type: integer
      provider_id:
        type: string
        description: "The ID of the attending provider - internal boc id? should be validated"
      id:
        type: string
        description: "A reference to this encounter"
      start:
        type: string
        format: date-time
        description: "Date of patient admission to facility, if applicable"
      end:
        type: string
        format: date-time
        description: "Date of patient discharge from facility, if applicable"
      admitting_provider_id:
        type: string
        description: "Unique Physician ID associated with the physician admitting the patient.  This is not always applicable"
      rendering_provider_id:
        type: string
        description: "Unique Physician ID associated with the physician performing an associated procedure.  This is not always applicable"
      facility_id:
        description: "The ID of the treating facility"
        type: string
      discharge_disposition:
        type: string
        description: "Code from standard code set: https://www.resdac.org/cms-data/variables/patient-discharge-status-code"
        enum: [0,01,02,03,04,05,06,07,08,09,20,21,30,40,41,42,43,50,51,61,62,63,64,65,66,69,70,71,72,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95]
      place_of_service:
        type: string
        description: "Type of place that this encounter happened at. Standard codeset: https://www.cms.gov/Medicare/Coding/place-of-service-codes/Place_of_Service_Code_Set.html"
        enum: [01,02,03,04,05,06,07,08,09,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,31,32,33,34,41,42,49,50,51,52,53,54,55,56,57,60,61,62,65,71,72,81,99]
      type:
        type: string
        description: "TODO - TBD"
      type_of_bill:
        type: string
        description: "Code from standard set: https://med.noridianmedicare.com/web/jea/topics/claim-submission/bill-types"
        enum: [110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869]
      diagnoses:
        type: array
        items:
          $ref: "#/definitions/Diagnosis"
      joint_exams:
        type: array
        items:
          $ref: "#/definitions/JointExam"
      medications:
        type: array
        items:
          $ref: "#/definitions/Medication"
      notes:
        type: array
        items:
          $ref: "#/definitions/Note"
      procedures:
        type: array
        items:
          $ref: "#/definitions/Procedure"
      observations:
        type: array
        items:
          $ref: "#/definitions/Observation"
      questionnaires:
        type: array
        items:
          $ref: "#/definitions/Questionnaire"
      results:
        type: array
        items:
          $ref: "#/definitions/Result"

  Event:
    type: object
    required: [start, end, type]
    properties:
      id:
        type: string
        description: "A reference to this event"
      start:
        type: string
        format: date-time
      end:
        type: string
        format: date-time
      type:
        type: string
        enum: [module_enrollment, index, interest, trigger]
      encounter:
        $ref: "#/definitions/Encounter"
      appointment:
        $ref: "#/definitions/Appointment"
      module_instances:
        type: array
        items:
          $ref: "#/definitions/ModuleInstance"
      related_events:
        type: array
        items:
          type: string

  JointExam:
    type: object
    properties:
      id:
        type: string
        description: "A reference to this JointExam"
      performing_provider_id:
        type: string
        description: "Local ID of the provider who performed the joint exam"
      esr:
        type: string
        description: "Erythrocyte sedimentation rate (ESR) measured for the patient"
      total_normal_28_joint_count:
        type: integer
        description:  "Total count of normal joints based on a 28-joint count"
      total_swollen_28_joint_count:
        type: integer
        description: "Total count of swollen joints based on a 28-joint count"
      total_tender_28_joint_count:
        type: integer
        description: "Total count of tender joints based on a 28-joint count"
      total_normal_76_joint_count:
        type: integer
        description: "Total count of normal joints based on a 76-joint count"
      total_swollen_76_joint_count:
        type: integer
        description: "Total count of swollen joints based on a 76-joint count"
      total_tender_76_joint_count:
        type: integer
        description: "Total count of tender joints based on a 76-joint count"

  Medication:
    type: object
    properties:
      id:
        type: string
        description: "A reference to this Medication"
      medication_record_type:
        type: string
        description: "Type of medication record, for example - administration, order, patient_reported"
        enum: [administration, order, patient_reported]
      administering_provider_id:
        type: string
        description: "For drugs administered directly to the patient, this identifies the administering provider ID"
      action:
        type: string
        description: "TODO - TBD"
      code:
        type: string
        description: "Medication Code - may be a code from any standard code set including NDC, GPI, and SNOMED"
      dispense_as_written:
        type: boolean
        description: "True if medication to be dispensed as written"
      days_supply:
        type: string
        description: "Days supply for medications ordered"
      days_supply_derived:
        type: string
        description: "Days supply for medications ordered"
      discontinued:
        type: boolean
        description: "True if medication is discontinued"
      dispense_quantity:
        type: string
        description: "Amount of medication dispensed.  For example, this could be a pill count"
      doses_per_day:
        type: string
        description: "Number of doses prescribed per day"
      doses_per_day_derived:
        type: string
        description: "Number of doses prescribed per day"
      end:
        type: string
        description: "End date of medication record"
        format: date-time
      expire:
        type: string
        description: "Expiration date of medication"
        format: date-time
      form:
        type: string
        description: "Medication Form.  For example, liquid, tablets, inhalers, capsules, etc"
      frequency:
        type: string
        description: "Medication frequency for the prescribed medications"
      gpi:
        type: string
        description: "Medication GPI code (Generic Product Identifier). Not always applicable "
      infusion_dose:
        type: string
        description: "For infusion medications, this field contains the dosage"
      infusion_end:
        type: string
        description: "For infusion medications, this field denotes the end time"
        format: date-time
      infusion_expiry_1:
        type: string
        description: "For infusion medications, this field denotes the first expiry date"
        format: date-time
      infusion_expiry_2:
        type: string
        description: "For infusion medications, this field denotes the second expiry date"
        format: date-time
      infusion_expiry_3:
        type: string
        description: "For infusion medications, this field denotes the third expiry date"
        format: date-time
      infusion_expiry_4:
        type: string
        description: "For infusion medications, this field denotes the fourth expiry date"
        format: date-time
      infusion:
        type: boolean
        description: "True if the medication as an infusion"
      infusion_patient_weight:
        type: string
        description: "Weight of the patient at the time of the infusion"
      infusion_patient_weight_unit:
        type: string
        description: "Unit for the patient weight at the time of the infusion"
      infusion_planned_dose:
        type: string
        description: "Infusion planned dosage"
      infusion_planned_dose_unit:
        type: string
        description: "Unit associated with the infusion planned dosage"
      infusion_rate:
        type: string
        description: "Rate of the infusion"
      infusion_rate_unit:
        type: string
        description: "Unit associated with the rate of infusion"
      infusion_reason_for_adjustment:
        type: string
        description: "Reason, if any, for an adjustment in the planned dosage"
      infusion_start:
        type: string
        description: "For infusion medications, this field denotes the start time"
        format: date-time
      infusion_therapy_type:
        type: string
        description: "For infusion medications, this field describes the type of infusion"
      infusion_volume_infused:
        type: string
        description: "Actual infusion volume administered"
      infusion_volume_infused_unit:
        type: string
        description: "Unit associated with actual infusion volume administered"
      name:
        type: string
        description: "Medication Name"
      ndc:
        type: string
        description: "Medication NDC (National Drug Code)"
      or_dispense:
        type: string
        description: "Identifies medications as administered or dispensed"
      pharmacy_fill_number:
        type: string
        description: "This denotes the fill number associated with a dispensed medication - not always applicable"
      prescription_fill_number:
        type: string
        description: "This denotes the fill number associated with a dispensed medication - not always applicable"
      reason_for_discontinuation:
        type: string
        description: "Reason why a medication was discontinued"
      reason_for_start:
        type: string
        description: "Reason for starting a medication"
      refills_authorized:
        type: string
        description: "Number of medication refills authorized"
      route_of_admin:
        type: string
        description: "Medication route of administration"
      rxnorm:
        type: string
        description: "Standardized RxNorm medication code if available"
      sig:
        type: string
        description: "Physician notes regarding medication dispensed or administered"
      start:
        type: string
        description: "Medication start date"
        format: date-time
      status:
        type: string
        description: "Medication status.  For example, Active, discontinued, etc"
      strength:
        type: string
        description: "Medication dosage strength"
      total_dose:
        type: string
        description: "Total medication dosage"
      type:
        type: string
        description: "Describes source of the medication data, for example prescription"
      unit:
        type: string
        description: "Unit of measure associated with administered medications"

  ModuleInstance:
    type: object
    required: [module_id, instance_id, type]
    properties:
      module_id:
        type: integer
        format: int32
      instance_id:
        type: integer
        format: int32
      type:
        type: string

  Note:
    type: object
    properties:
      id:
        type: string
        description: "A reference to this Note"
      name:
        type: string
        description: Name
      documenting_provider_id:
        type: string
        description: "The provider who documented the text in the note."
      text:
        type: string
        description: "The content of the note."

  Observation:
    type: object
    required: [code, value, unit]
    properties:
      id:
        type: string
        description: "A reference to this observation"
      code:
        description: >
          Code describing the type of observation.
          Observations codes generally depend on the data source
          and the only standardized code type may be SNOMED, but we treat this as
          if it depends on the data source.
        type: string
      name:
        description: "Optional text description of this type of observation"
        type: string
      value:
        description: "The measurement recorded for this observation"
        type: string
      unit:
        description: "The unit of measurement for the observation"
        type: string
    example:
      code: "3141-9"
      name: "Patient Body Weight - Measured"
      value: "86"
      unit: "kg"

  Patient:
    type: object
    description: "Information about a patient that does not change with time."
    required: [patient_id]
    properties:
      patient_id:
        description: "Unique ID of the patient that can be used to search for a patient record"
        type: string
      deceased:
        description: "Is this patient dead"
        type: boolean
      race:
        type: string
      sex_at_birth:
        description: "The sex of the patient at birth"
        enum: [Male, Female, Unknown, Other]
        type: string
      date_of_birth:
        description: "Date of birth. If only the year is known"
        type: string
      dob_is_year:
        description: "True if the value in date_of_birth is only accurate to the year."
        type: boolean
      encounters:
        type: array
        items:
          $ref: "#/definitions/Encounter"
      demographics:
        type: array
        items:
          $ref: "#/definitions/PatientDemographic"

  PatientDemographic:
    type: object
    description: "Information about a patient that may change with time"
    required: [patient_id]
    properties:
      patient_id:
        type: string
        description: "Unique ID of the patient"
      recorded:
        type: string
        format: date-time
      sex:
        type: string
        description: >
          The sex of the patient at this time.
        enum: [Male, Female, Unknown, Other]


  Procedure:
    type: object
    description: "A procedure or a scheduled procedure"
    required: [code, code_type]
    properties:
      id:
        type: string
        description: "A reference to this procedure"
      anatomic_location:
        type: string
        description: "Anatomical location of performed procedure, if applicable"
      code:
        type: string
        description: "Standardize code associated with the procedure code (see code_type for more information)"
      code_type:
        type: string
        description: "Type of procedure code such as CPT, HCPCs, ICD9/10, etc"
      name:
        type: string
        description: "Name of performed procedure"
      principal_procedure:
        type: boolean
        description: "This flag is true if the primary procedure for a given encounter"
      quantity:
        type: string
        description: "Number of units associated with the procedure code"
      rev_code:
        type: string
        description: "Revenue Code associated with the procedure billed, if applicable. Useful for inpatient"
      ordering_provider_id:
        type: string
        description: "The ID of the ordering provider"
      performing_provider_id:
        type: string
        description: "The ID of the performing provider"
      results:
        type: string
        description: "Free text"
      status:
        type: string
        description: "Free text"

    example:
      code: "92941"
      code_type: "CPT"
      name: "Revascularization of acute total/subtotal occlusion during acute myocardial infarction"

  Provider:
    type: object
    required: [first_name, last_name]
    properties:
      id:
        type: string
        description: "A reference to this provider"
      first_name:
        type: string
      last_name:
        type: string
      npi:
        type: string
        description: "National Provider Identifier"
      specialty_code:
        type: string
        description: "Provider Specialty"
      type:
        type: string
        description: "Describes provider License information.  For example, MD, DO, etc"

  Questionnaire:
    type: object
    properties:
      id:
        type: string
        description: "A reference to this Questionnaire"
      name:
        type: string
        description: "Questionnaire name (e.g., SDAI)"
      result:
        type: string
        description: "Questionnaire result"

  Result:
    type: object
    properties:
      id:
        type: string
        description: "A reference to this Result"
      status:
        type: string
        description: "The status of whether the lab result has been reviewed, acknowledged and finalized."
      panel_code:
        type: string
        description: "The name of the lab panel.  The panel may contain more than one type lab result, so it is a higher level entity than the result field.  If this is not populated then the PANEL_NAME may be populated and will be displayed as the name of the lab panel."
      panel_name:
        type: string
        description: "The name of the lab panel.  It this is not populated then the PANEL_CODE may be populated and will be displayed as the name of the lab panel."
      code:
        type: string
        description: "The name of the lab result. Only display this value on the screen as the Lab Name if the NAME is not populated"
      name:
        type: string
        description: "The name of the lab result.  This should be displayed as the lab name, if it is not populated then the value in the CODE should be displayed."
      value:
        type: string
        description: "The result for the lab.  The result may be appear as text or numeric depending on the type of lab that it is."
      unit:
        type: string
        description: "The unit is the unit for the lab result.  If the value is Text or Picklist this does not need to be displayed. "
      reference_range:
        type: string
        description: "Lab test reference range which displays the acceptable result values"
      loinc:
        type: string
        description: "Standardized Lab Test Code, if available use the LOINC name rather than the code"
      performed:
        type: string
        description: "Date the lab was performed or tested"
        format: date-time
      abnormal:
        type: boolean
        description: "Flag is set to True when the lab result is outside of the expected range"
      specimen_source:
        type: string
        description: "The source of the lab specimen.  For example, serum, urine, etc"

  Score:
    type: object
    properties:
      id:
        type: string
        description: "A reference to this score"
      score_instance_id:
        type: string
      observation_datetime:
        type: string
        format: date-time
      score:
        type: number
        format: decimal
      confidence:
        type: number
        format: decimal
      threshold:
        type: number
        format: decimal
      match:
        type: boolean
      match_datetime:
        type: string
        format: date-time
      referenced_module_instance:
        $ref: "#/definitions/ModuleInstance"

securityDefinitions:
  Token:
    type: apiKey
    name: Authorization
    in: header

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
